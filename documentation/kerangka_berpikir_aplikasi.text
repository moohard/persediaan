Rancangan Database Aplikasi Persediaan Barang
Berikut adalah rancangan database yang komprehensif untuk sistem manajemen inventaris yang kompleks. Desain ini mengadopsi pendekatan ledger-based, di mana setiap pergerakan stok dicatat sebagai transaksi yang tidak dapat diubah, memastikan integritas data dan kemudahan audit.

Diagram Relasi Entitas (ERD)
Diagram ini menunjukkan hubungan antar tabel utama dalam database.

erDiagram
    PRODUCTS {
        int product_id PK
        varchar name
        text description
        int category_id FK
        int brand_id FK
        timestamp created_at
    }

    PRODUCT_VARIANTS {
        int variant_id PK
        int product_id FK
        varchar sku UK "Stock Keeping Unit"
        varchar variant_name "e.g., Merah, XL"
        decimal purchase_price
        decimal selling_price
        json attributes "{\"warna\": \"Merah\", \"ukuran\": \"XL\"}"
        int reorder_level
    }

    WAREHOUSES {
        int warehouse_id PK
        varchar name
        text address
        boolean is_active
    }

    STOCK_LEVELS {
        int stock_level_id PK
        int variant_id FK
        int warehouse_id FK
        int quantity_on_hand "Stok Fisik"
        int quantity_committed "Dipesan Pelanggan"
        int quantity_on_order "Dipesan ke Supplier"
        UNIQUE(variant_id, warehouse_id)
    }

    STOCK_MOVEMENTS {
        bigint movement_id PK
        int variant_id FK
        int warehouse_id FK
        int quantity_change "+/-"
        varchar movement_type "e.g., GOODS_RECEIPT, SALES_SHIPMENT"
        int reference_id "ID dari PO, SO, Adjustment"
        timestamp movement_date
        int user_id FK
    }

    SUPPLIERS {
        int supplier_id PK
        varchar name
        varchar contact_person
        varchar email
    }

    PURCHASE_ORDERS {
        int po_id PK
        int supplier_id FK
        date order_date
        varchar status
    }

    PURCHASE_ORDER_ITEMS {
        int po_item_id PK
        int po_id FK
        int variant_id FK
        int quantity
        decimal unit_price
    }

    CUSTOMERS {
        int customer_id PK
        varchar name
        varchar email
    }

    SALES_ORDERS {
        int so_id PK
        int customer_id FK
        date order_date
        varchar status
    }

    SALES_ORDER_ITEMS {
        int so_item_id PK
        int so_id FK
        int variant_id FK
        int quantity
        decimal unit_price
    }

    USERS {
        int user_id PK
        varchar username
        varchar password_hash
        int role_id FK
    }

    CATEGORIES { int category_id PK; varchar name; }
    BRANDS { int brand_id PK; varchar name; }
    ROLES { int role_id PK; varchar name; }

    PRODUCTS ||--o{ PRODUCT_VARIANTS : "memiliki"
    PRODUCT_VARIANTS ||--o{ STOCK_LEVELS : "memiliki stok di"
    WAREHOUSES ||--o{ STOCK_LEVELS : "menyimpan"
    PRODUCT_VARIANTS ||--o{ STOCK_MOVEMENTS : "memiliki riwayat"
    WAREHOUSES ||--o{ STOCK_MOVEMENTS : "terjadi di"
    USERS ||--o{ STOCK_MOVEMENTS : "dilakukan oleh"
    SUPPLIERS ||--o{ PURCHASE_ORDERS : "memasok"
    PURCHASE_ORDERS ||--o{ PURCHASE_ORDER_ITEMS : "berisi"
    PRODUCT_VARIANTS }o--|| PURCHASE_ORDER_ITEMS : "dipesan"
    CUSTOMERS ||--o{ SALES_ORDERS : "membeli"
    SALES_ORDERS ||--o{ SALES_ORDER_ITEMS : "berisi"
    PRODUCT_VARIANTS }o--|| SALES_ORDER_ITEMS : "dijual"
    CATEGORIES }o--|| PRODUCTS : "dikategorikan"
    BRANDS }o--|| PRODUCTS : "dari brand"
    ROLES }o--|| USERS : "memiliki peran"

Detail Struktur Tabel
Modul 1: Data Master
Tabel ini menyimpan data inti yang menjadi fondasi sistem.

products (Produk Induk)

Menyimpan informasi umum tentang sebuah produk, terlepas dari variannya.

Contoh: "Kemeja Lengan Panjang".

product_variants (Varian Produk)

Tabel terpenting untuk mendefinisikan item yang sebenarnya disimpan dan dijual.

sku: Kode unik untuk setiap varian (misal: KMLP-BIRU-XL). Ini adalah kunci operasional utama.

attributes: Kolom JSON untuk fleksibilitas atribut (warna, ukuran, bahan, dll).

warehouses (Gudang/Lokasi)

Mendefinisikan semua lokasi fisik tempat stok disimpan. Bisa berupa gudang pusat, toko ritel, atau lokasi konsinyasi.

Tabel Pendukung: suppliers, customers, categories, brands, users, roles.

Modul 2: Manajemen Stok (Inti Sistem)
Ini adalah jantung dari aplikasi inventaris.

stock_levels (Level Stok Saat Ini)

Berfungsi sebagai snapshot atau ringkasan stok terkini untuk performa. Tabel ini di-update oleh trigger atau logika aplikasi setiap kali ada pergerakan.

quantity_on_hand: Stok fisik yang ada di rak.

quantity_committed: Stok yang sudah dipesan pelanggan tapi belum dikirim.

quantity_on_order: Stok yang sudah kita pesan ke supplier tapi belum diterima.

Stok Tersedia untuk Dijual (Available Stock) dihitung dengan rumus: quantity_on_hand - quantity_committed.

stock_movements (Buku Besar/Ledger Pergerakan Stok)

Tabel Paling Kritis. Mencatat setiap perubahan kuantitas stok sebagai transaksi terpisah. Tabel ini bersifat append-only (hanya boleh ditambah, tidak boleh diubah/dihapus).

quantity_change: Nilai bisa positif (untuk penambahan) atau negatif (untuk pengurangan).

movement_type: Menjelaskan alasan pergerakan, contohnya:

GOODS_RECEIPT: Penerimaan barang dari supplier.

SALES_SHIPMENT: Pengiriman barang ke pelanggan.

STOCK_ADJUSTMENT: Penyesuaian stok (rusak, hilang, ditemukan).

TRANSFER_OUT: Pindah barang keluar ke gudang lain.

TRANSFER_IN: Pindah barang masuk dari gudang lain.

reference_id: Menunjuk ke ID dokumen sumber (misal: po_id, so_id).

Modul 3: Proses Pembelian
purchase_orders (Pesanan Pembelian)

Dokumen untuk memesan barang dari supplier.

purchase_order_items (Detail Item PO)

Rincian varian produk yang dipesan dalam sebuah PO.

Modul 4: Proses Penjualan
sales_orders (Pesanan Penjualan)

Dokumen pesanan dari pelanggan.

sales_order_items (Detail Item SO)

Rincian varian produk yang dipesan oleh pelanggan.

Contoh Alur Kerja
1. Menerima Barang dari Supplier:

Sebuah purchase_order dibuat. quantity_on_order di stock_levels untuk varian terkait akan bertambah.

Saat barang fisik tiba, proses Goods Receipt dijalankan.

Sebuah entri baru dibuat di stock_movements dengan movement_type = 'GOODS_RECEIPT' dan quantity_change bernilai positif (misal: +100).

Logika aplikasi akan meng-update tabel stock_levels:

quantity_on_hand bertambah sebanyak 100.

quantity_on_order berkurang sebanyak 100.

2. Mengirim Barang ke Pelanggan:

Sebuah sales_order dibuat. quantity_committed di stock_levels akan bertambah. Stok yang tersedia untuk dijual (available_stock) pun berkurang.

Saat barang akan dikirim, proses Shipment dijalankan.

Sebuah entri baru dibuat di stock_movements dengan movement_type = 'SALES_SHIPMENT' dan quantity_change bernilai negatif (misal: -5).

Logika aplikasi akan meng-update tabel stock_levels:

quantity_on_hand berkurang sebanyak 5.

quantity_committed berkurang sebanyak 5.

Pertimbangan Lanjutan
Stock Opname (Stock Adjustment): Perlu dibuat modul terpisah untuk proses ini. Hasilnya akan dicatat sebagai STOCK_ADJUSTMENT di stock_movements.

Pelacakan Nomor Seri/Batch: Jika diperlukan, tambahkan tabel serial_numbers atau batch_numbers yang berelasi dengan stock_movements untuk melacak setiap unit atau batch secara individual.

Indexing: Semua kolom Foreign Key (FK) dan kolom yang sering digunakan untuk filter (seperti sku, movement_type, movement_date) harus di-index untuk menjaga performa query tetap cepat.
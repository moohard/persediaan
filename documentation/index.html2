<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dasbor Manajemen Inventaris</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Warm Neutrals -->
    <!-- Application Structure Plan: The application is designed as a task-oriented dashboard. The default view is a high-level 'Dashboard' showing key metrics (KPIs), a comparative chart of stock by warehouse, and a log of recent movements. This structure was chosen for immediate usability, allowing a manager to grasp the overall inventory health at a glance. Users can then drill down into specific areas ('Produk', 'Gudang') via a clear top navigation. This is more intuitive than mirroring the database structure, as it aligns with user tasks like 'check status' and 'investigate details'. Key interactions include clicking the warehouse chart to cross-filter all dashboard components, providing a dynamic and connected experience. -->
    <!-- Visualization & Content Choices: 
        - Report Info: Aggregate stock levels per warehouse. -> Goal: Compare. -> Viz/Method: Bar Chart. -> Interaction: Click bar to filter dashboard. -> Justification: Bar charts are excellent for comparing discrete categories. Click-to-filter provides an intuitive drill-down mechanism. -> Library: Chart.js.
        - Report Info: Key inventory metrics (total value, items available). -> Goal: Inform. -> Viz/Method: Large text KPI cards. -> Interaction: None. -> Justification: Provides quick, scannable, high-level information. -> Library/Method: HTML/Tailwind.
        - Report Info: Chronological stock movements. -> Goal: Organize/Audit. -> Viz/Method: HTML Table. -> Interaction: None. -> Justification: A table is the clearest way to present chronological log data. -> Library/Method: HTML/Tailwind.
        - Report Info: Stock history for a single product variant. -> Goal: Show Change. -> Viz/Method: Line Chart. -> Interaction: View appears in product detail modal. -> Justification: A line chart is the standard for showing a value's change over time. -> Library: Chart.js.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body { font-family: 'Inter', sans-serif; }
        .chart-container { position: relative; width: 100%; max-width: 800px; margin-left: auto; margin-right: auto; height: 320px; max-height: 40vh; }
        @media (min-width: 768px) { .chart-container { height: 400px; } }
        .nav-active { border-bottom-color: #4f46e5; color: #4f46e5; font-weight: 600; }
        .nav-inactive { border-bottom-color: transparent; color: #6b7280; }
        .modal-backdrop {
            position: fixed; top: 0; left: 0; right: 0; bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex; align-items: center; justify-content: center;
            opacity: 0; visibility: hidden; transition: opacity 0.3s, visibility 0.3s;
        }
        .modal-backdrop.visible { opacity: 1; visibility: visible; }
        .modal-content {
            background-color: white; border-radius: 0.5rem; padding: 1.5rem;
            width: 90%; max-width: 60rem; max-height: 90vh; overflow-y: auto;
            transform: scale(0.95); transition: transform 0.3s;
        }
        .modal-backdrop.visible .modal-content { transform: scale(1); }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">

    <div id="app" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">Dasbor Inventaris</h1>
            <p class="text-gray-600 mt-1">Analisis dan kelola persediaan barang Anda secara real-time.</p>
        </header>

        <nav class="border-b border-gray-200 mb-8">
            <ul class="flex -mb-px">
                <li><a href="#dashboard" class="nav-tab text-sm sm:text-base inline-block p-4 border-b-2 rounded-t-lg nav-active">Dasbor</a></li>
                <li><a href="#products" class="nav-tab text-sm sm:text-base inline-block p-4 border-b-2 rounded-t-lg nav-inactive">Produk</a></li>
                <li><a href="#warehouses" class="nav-tab text-sm sm:text-base inline-block p-4 border-b-2 rounded-t-lg nav-inactive">Gudang</a></li>
            </ul>
        </nav>

        <main>
            <div id="dashboard-page" class="page">
                <section id="dashboard-intro" class="mb-8 p-4 bg-white rounded-lg shadow-sm">
                    <h2 class="text-xl font-semibold text-gray-800 mb-2">Selamat Datang di Dasbor Utama</h2>
                    <p class="text-gray-600">Bagian ini memberikan Anda gambaran umum dan ringkasan dari status inventaris Anda saat ini. Anda dapat melihat metrik kunci, membandingkan tingkat stok antar gudang, dan melacak pergerakan barang terbaru. Gunakan grafik interaktif untuk memfilter data dan mendapatkan wawasan lebih dalam.</p>
                </section>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <h3 class="text-sm font-medium text-gray-500">Nilai Inventaris</h3>
                        <p id="kpi-total-value" class="mt-1 text-3xl font-semibold text-gray-900"></p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <h3 class="text-sm font-medium text-gray-500">Total Unit Stok</h3>
                        <p id="kpi-total-units" class="mt-1 text-3xl font-semibold text-gray-900"></p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <h3 class="text-sm font-medium text-gray-500">Jumlah Varian Produk</h3>
                        <p id="kpi-variant-count" class="mt-1 text-3xl font-semibold text-gray-900"></p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <h3 class="text-sm font-medium text-gray-500">Stok Menipis</h3>
                        <p id="kpi-low-stock" class="mt-1 text-3xl font-semibold text-red-600"></p>
                    </div>
                </div>

                <div class="grid grid-cols-1 xl:grid-cols-5 gap-8">
                    <div class="xl:col-span-3 bg-white p-6 rounded-lg shadow-sm">
                        <h3 id="warehouse-chart-title" class="text-lg font-semibold mb-4">Tingkat Stok per Gudang</h3>
                        <div class="chart-container">
                            <canvas id="warehouseStockChart"></canvas>
                        </div>
                         <button id="reset-filter-btn" class="hidden mt-4 mx-auto block bg-indigo-100 text-indigo-700 px-4 py-2 rounded-lg text-sm font-medium hover:bg-indigo-200 transition">Tampilkan Semua Gudang</button>
                    </div>

                    <div class="xl:col-span-2 bg-white p-6 rounded-lg shadow-sm">
                        <h3 id="movements-title" class="text-lg font-semibold mb-4">Pergerakan Stok Terbaru</h3>
                        <div class="overflow-y-auto h-96">
                            <table class="w-full text-sm text-left text-gray-500">
                                <thead class="text-xs text-gray-700 uppercase bg-gray-50 sticky top-0">
                                    <tr>
                                        <th scope="col" class="py-3 px-4">Produk</th>
                                        <th scope="col" class="py-3 px-4">Jumlah</th>
                                        <th scope="col" class="py-3 px-4">Tipe</th>
                                    </tr>
                                </thead>
                                <tbody id="movements-table-body">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div id="products-page" class="page hidden">
                <section id="products-intro" class="mb-8 p-4 bg-white rounded-lg shadow-sm">
                    <h2 class="text-xl font-semibold text-gray-800 mb-2">Manajemen Produk</h2>
                    <p class="text-gray-600">Halaman ini berisi daftar semua varian produk yang Anda miliki. Anda dapat menggunakan fitur pencarian untuk menemukan produk spesifik berdasarkan nama atau SKU. Klik pada salah satu produk untuk melihat detail lengkap, termasuk informasi stok di setiap gudang dan riwayat pergerakannya.</p>
                </section>
                
                <div class="mb-6">
                    <input type="text" id="product-search" placeholder="Cari berdasarkan nama atau SKU..." class="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500">
                </div>

                <div class="bg-white rounded-lg shadow-sm overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="w-full text-sm text-left text-gray-500">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                <tr>
                                    <th scope="col" class="py-3 px-6">SKU</th>
                                    <th scope="col" class="py-3 px-6">Nama Produk</th>
                                    <th scope="col" class="py-3 px-6">Total Stok</th>
                                    <th scope="col" class="py-3 px-6">Harga Jual</th>
                                    <th scope="col" class="py-3 px-6">Aksi</th>
                                </tr>
                            </thead>
                            <tbody id="products-table-body">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div id="warehouses-page" class="page hidden">
                <section id="warehouses-intro" class="mb-8 p-4 bg-white rounded-lg shadow-sm">
                    <h2 class="text-xl font-semibold text-gray-800 mb-2">Daftar Gudang</h2>
                    <p class="text-gray-600">Berikut adalah daftar semua lokasi penyimpanan atau gudang yang terdaftar dalam sistem. Setiap kartu menampilkan informasi dasar tentang gudang dan ringkasan jumlah total unit serta varian produk yang disimpan di lokasi tersebut. Ini membantu Anda memantau distribusi inventaris di seluruh lokasi operasional Anda.</p>
                </section>
                <div id="warehouse-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                </div>
            </div>
        </main>
    </div>

    <div id="product-modal" class="modal-backdrop">
        <div class="modal-content">
            <div class="flex justify-between items-start mb-4">
                <div>
                    <h2 id="modal-product-name" class="text-2xl font-bold text-gray-900"></h2>
                    <p id="modal-product-sku" class="text-sm text-gray-500"></p>
                </div>
                <button id="modal-close-btn" class="text-gray-400 hover:text-gray-600">&times;</button>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                    <h3 class="text-lg font-semibold mb-2">Detail Produk</h3>
                    <div class="space-y-2 text-sm">
                        <p><strong>Deskripsi:</strong> <span id="modal-product-desc"></span></p>
                        <p><strong>Kategori:</strong> <span id="modal-product-category"></span></p>
                        <p><strong>Brand:</strong> <span id="modal-product-brand"></span></p>
                        <p><strong>Atribut:</strong> <span id="modal-product-attributes"></span></p>
                        <p><strong>Harga Beli:</strong> <span id="modal-purchase-price"></span></p>
                        <p><strong>Harga Jual:</strong> <span id="modal-selling-price"></span></p>
                    </div>
                    
                    <h3 class="text-lg font-semibold mt-6 mb-2">Stok per Gudang</h3>
                    <table class="w-full text-sm text-left text-gray-500">
                        <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                            <tr>
                                <th class="py-2 px-4">Gudang</th>
                                <th class="py-2 px-4">Stok Fisik</th>
                                <th class="py-2 px-4">Dipesan</th>
                            </tr>
                        </thead>
                        <tbody id="modal-stock-levels-body">
                        </tbody>
                    </table>
                </div>
                <div>
                    <h3 class="text-lg font-semibold mb-2">Riwayat Stok</h3>
                    <div class="chart-container" style="height: 300px; max-height: 300px;">
                        <canvas id="productStockHistoryChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>


<script>
document.addEventListener('DOMContentLoaded', () => {

    const MOCK_DATA = {
        categories: [
            { id: 1, name: 'Pakaian Pria' },
            { id: 2, name: 'Elektronik' }
        ],
        brands: [
            { id: 1, name: 'Adidata' },
            { id: 2, name: 'Samsonic' }
        ],
        warehouses: [
            { id: 1, name: 'Gudang Pusat Jakarta', address: 'Jl. Raya Bogor KM 20, Jakarta Timur', is_active: true },
            { id: 2, name: 'Toko Cabang Bandung', address: 'Jl. Asia Afrika No. 1, Bandung', is_active: true },
            { id: 3, name: 'Gudang Surabaya', address: 'Jl. Raya Darmo 55, Surabaya', is_active: true }
        ],
        products: [
            { id: 1, name: 'Kemeja Flanel Lengan Panjang', description: 'Kemeja flanel premium bahan katun.', category_id: 1, brand_id: 1 },
            { id: 2, name: 'Smartphone Galaxy Z', description: 'Smartphone canggih dengan layar lipat.', category_id: 2, brand_id: 2 }
        ],
        product_variants: [
            { id: 1, product_id: 1, sku: 'AD-KFLP-MR-L', variant_name: 'Merah, L', purchase_price: 150000, selling_price: 250000, attributes: { warna: 'Merah', ukuran: 'L' }, reorder_level: 10 },
            { id: 2, product_id: 1, sku: 'AD-KFLP-BR-L', variant_name: 'Biru, L', purchase_price: 150000, selling_price: 250000, attributes: { warna: 'Biru', ukuran: 'L' }, reorder_level: 10 },
            { id: 3, product_id: 2, sku: 'SS-GZ-256-BLK', variant_name: '256GB, Hitam', purchase_price: 12000000, selling_price: 15000000, attributes: { penyimpanan: '256GB', warna: 'Hitam' }, reorder_level: 5 },
            { id: 4, product_id: 1, sku: 'AD-KFLP-HJ-M', variant_name: 'Hijau, M', purchase_price: 145000, selling_price: 245000, attributes: { warna: 'Hijau', ukuran: 'M' }, reorder_level: 15 },
        ],
        stock_levels: [
            { variant_id: 1, warehouse_id: 1, quantity_on_hand: 50, quantity_committed: 5, quantity_on_order: 20 },
            { variant_id: 1, warehouse_id: 2, quantity_on_hand: 25, quantity_committed: 2, quantity_on_order: 0 },
            { variant_id: 2, warehouse_id: 1, quantity_on_hand: 40, quantity_committed: 10, quantity_on_order: 0 },
            { variant_id: 3, warehouse_id: 1, quantity_on_hand: 15, quantity_committed: 3, quantity_on_order: 10 },
            { variant_id: 3, warehouse_id: 3, quantity_on_hand: 8, quantity_committed: 1, quantity_on_order: 5 },
            { variant_id: 4, warehouse_id: 2, quantity_on_hand: 60, quantity_committed: 8, quantity_on_order: 0 },
        ],
        stock_movements: [
            { movement_id: 1, variant_id: 1, warehouse_id: 1, quantity_change: 70, movement_type: 'GOODS_RECEIPT', movement_date: '2025-08-01T10:00:00Z' },
            { movement_id: 2, variant_id: 3, warehouse_id: 1, quantity_change: 25, movement_type: 'GOODS_RECEIPT', movement_date: '2025-08-02T11:00:00Z' },
            { movement_id: 3, variant_id: 1, warehouse_id: 1, quantity_change: -5, movement_type: 'SALES_SHIPMENT', movement_date: '2025-08-03T14:30:00Z' },
            { movement_id: 4, variant_id: 2, warehouse_id: 1, quantity_change: 50, movement_type: 'GOODS_RECEIPT', movement_date: '2025-08-04T09:00:00Z' },
            { movement_id: 5, variant_id: 1, warehouse_id: 1, quantity_change: -15, movement_type: 'TRANSFER_OUT', movement_date: '2025-08-05T16:00:00Z' },
            { movement_id: 6, variant_id: 1, warehouse_id: 2, quantity_change: 15, movement_type: 'TRANSFER_IN', movement_date: '2025-08-05T18:00:00Z' },
            { movement_id: 7, variant_id: 3, warehouse_id: 1, quantity_change: -10, movement_type: 'SALES_SHIPMENT', movement_date: '2025-08-06T11:20:00Z' },
            { movement_id: 8, variant_id: 2, warehouse_id: 1, quantity_change: -10, movement_type: 'SALES_SHIPMENT', movement_date: '2025-08-10T13:00:00Z' },
            { movement_id: 9, variant_id: 4, warehouse_id: 2, quantity_change: 68, movement_type: 'GOODS_RECEIPT', movement_date: '2025-08-11T10:00:00Z' },
            { movement_id: 10, variant_id: 1, warehouse_id: 2, quantity_change: 10, movement_type: 'GOODS_RECEIPT', movement_date: '2025-08-12T15:00:00Z' },
            { movement_id: 11, variant_id: 3, warehouse_id: 3, quantity_change: 15, movement_type: 'GOODS_RECEIPT', movement_date: '2025-08-15T09:30:00Z' },
            { movement_id: 12, variant_id: 3, warehouse_id: 3, quantity_change: -7, movement_type: 'SALES_SHIPMENT', movement_date: '2025-08-20T17:00:00Z' },
        ]
    };

    let warehouseStockChart = null;
    let productStockHistoryChart = null;
    let activeWarehouseFilter = null;

    const formatCurrency = (value) => new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 }).format(value);
    const formatMovementType = (type) => {
        const types = {
            'GOODS_RECEIPT': { text: 'Penerimaan', color: 'text-green-600', icon: '&#x2191;' },
            'SALES_SHIPMENT': { text: 'Pengiriman', color: 'text-red-600', icon: '&#x2193;' },
            'TRANSFER_OUT': { text: 'Transfer Keluar', color: 'text-yellow-600', icon: '&#x2192;' },
            'TRANSFER_IN': { text: 'Transfer Masuk', color: 'text-blue-600', icon: '&#x2190;' },
            'STOCK_ADJUSTMENT': { text: 'Penyesuaian', color: 'text-gray-600', icon: '&#x2195;' }
        };
        return types[type] || { text: type, color: 'text-gray-500', icon: '' };
    };

    function getVariantDetails(variantId) {
        const variant = MOCK_DATA.product_variants.find(v => v.id === variantId);
        if (!variant) return null;
        const product = MOCK_DATA.products.find(p => p.id === variant.product_id);
        return { ...variant, product };
    }

    function renderDashboard() {
        let filteredLevels = MOCK_DATA.stock_levels;
        let filteredMovements = MOCK_DATA.stock_movements;

        if (activeWarehouseFilter) {
            filteredLevels = MOCK_DATA.stock_levels.filter(sl => sl.warehouse_id === activeWarehouseFilter);
            filteredMovements = MOCK_DATA.stock_movements.filter(sm => sm.warehouse_id === activeWarehouseFilter);
            const warehouseName = MOCK_DATA.warehouses.find(w => w.id === activeWarehouseFilter).name;
            document.getElementById('warehouse-chart-title').textContent = `Tingkat Stok di ${warehouseName}`;
            document.getElementById('movements-title').textContent = `Pergerakan Terbaru di ${warehouseName}`;
            document.getElementById('reset-filter-btn').classList.remove('hidden');
        } else {
            document.getElementById('warehouse-chart-title').textContent = 'Tingkat Stok per Gudang';
            document.getElementById('movements-title').textContent = 'Pergerakan Stok Terbaru';
            document.getElementById('reset-filter-btn').classList.add('hidden');
        }

        const totalValue = filteredLevels.reduce((sum, level) => {
            const variant = MOCK_DATA.product_variants.find(v => v.id === level.variant_id);
            return sum + (level.quantity_on_hand * (variant ? variant.purchase_price : 0));
        }, 0);
        const totalUnits = filteredLevels.reduce((sum, level) => sum + level.quantity_on_hand, 0);
        const lowStockCount = MOCK_DATA.product_variants.filter(variant => {
            const totalStock = MOCK_DATA.stock_levels
                .filter(sl => sl.variant_id === variant.id)
                .reduce((sum, sl) => sum + sl.quantity_on_hand, 0);
            return totalStock < variant.reorder_level;
        }).length;
        
        document.getElementById('kpi-total-value').textContent = formatCurrency(totalValue);
        document.getElementById('kpi-total-units').textContent = totalUnits.toLocaleString('id-ID');
        document.getElementById('kpi-variant-count').textContent = MOCK_DATA.product_variants.length;
        document.getElementById('kpi-low-stock').textContent = lowStockCount;

        renderMovementsTable(filteredMovements);
        renderWarehouseChart();
    }

    function renderWarehouseChart() {
        const ctx = document.getElementById('warehouseStockChart').getContext('2d');
        const warehouseData = MOCK_DATA.warehouses.map(warehouse => {
            const totalStock = MOCK_DATA.stock_levels
                .filter(sl => sl.warehouse_id === warehouse.id)
                .reduce((sum, level) => sum + level.quantity_on_hand, 0);
            return { name: warehouse.name, stock: totalStock, id: warehouse.id };
        });

        if (warehouseStockChart) {
            warehouseStockChart.destroy();
        }

        warehouseStockChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: warehouseData.map(w => w.name),
                datasets: [{
                    label: 'Jumlah Unit Stok',
                    data: warehouseData.map(w => w.stock),
                    backgroundColor: 'rgba(79, 70, 229, 0.8)',
                    borderColor: 'rgba(79, 70, 229, 1)',
                    borderWidth: 1,
                    borderRadius: 4,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: true, grid: { color: '#e5e7eb' } },
                    x: { grid: { display: false } }
                },
                plugins: {
                    legend: { display: false },
                    tooltip: {
                        callbacks: {
                            label: (context) => `${context.dataset.label}: ${context.raw.toLocaleString('id-ID')} unit`
                        }
                    }
                },
                onClick: (event, elements) => {
                    if (elements.length > 0) {
                        const chartElement = elements[0];
                        const warehouseId = warehouseData[chartElement.index].id;
                        activeWarehouseFilter = warehouseId;
                        renderDashboard();
                    }
                }
            }
        });
    }

    function renderMovementsTable(movements) {
        const tableBody = document.getElementById('movements-table-body');
        tableBody.innerHTML = '';
        const recentMovements = movements.sort((a, b) => new Date(b.movement_date) - new Date(a.movement_date)).slice(0, 20);

        if (recentMovements.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="3" class="text-center py-4 text-gray-500">Tidak ada pergerakan.</td></tr>`;
            return;
        }

        recentMovements.forEach(move => {
            const variantDetails = getVariantDetails(move.variant_id);
            if (!variantDetails) return;

            const typeInfo = formatMovementType(move.movement_type);
            const row = document.createElement('tr');
            row.className = 'bg-white border-b';
            row.innerHTML = `
                <td class="py-3 px-4 font-medium text-gray-900">${variantDetails.product.name} (${variantDetails.variant_name})</td>
                <td class="py-3 px-4 ${move.quantity_change > 0 ? 'text-green-600' : 'text-red-600'} font-semibold">${move.quantity_change > 0 ? '+' : ''}${move.quantity_change}</td>
                <td class="py-3 px-4">
                    <span class="inline-flex items-center px-2 py-1 text-xs font-medium rounded-full ${typeInfo.color.replace('text-', 'bg-').replace('600', '100')} ${typeInfo.color}">
                        ${typeInfo.text}
                    </span>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

    function renderProductsTable(searchTerm = '') {
        const tableBody = document.getElementById('products-table-body');
        tableBody.innerHTML = '';
        const lowerSearchTerm = searchTerm.toLowerCase();

        const filteredVariants = MOCK_DATA.product_variants.filter(variant => {
            const product = MOCK_DATA.products.find(p => p.id === variant.product_id);
            return variant.sku.toLowerCase().includes(lowerSearchTerm) || 
                   product.name.toLowerCase().includes(lowerSearchTerm) ||
                   variant.variant_name.toLowerCase().includes(lowerSearchTerm);
        });

        if (filteredVariants.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="5" class="text-center py-4 text-gray-500">Produk tidak ditemukan.</td></tr>`;
            return;
        }

        filteredVariants.forEach(variant => {
            const product = MOCK_DATA.products.find(p => p.id === variant.product_id);
            const totalStock = MOCK_DATA.stock_levels
                .filter(sl => sl.variant_id === variant.id)
                .reduce((sum, level) => sum + level.quantity_on_hand, 0);
            
            const row = document.createElement('tr');
            row.className = 'bg-white border-b hover:bg-gray-50';
            row.innerHTML = `
                <td class="py-4 px-6 font-medium text-gray-900">${variant.sku}</td>
                <td class="py-4 px-6">${product.name} (${variant.variant_name})</td>
                <td class="py-4 px-6">${totalStock}</td>
                <td class="py-4 px-6">${formatCurrency(variant.selling_price)}</td>
                <td class="py-4 px-6">
                    <button data-variant-id="${variant.id}" class="view-detail-btn font-medium text-indigo-600 hover:underline">Detail</button>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }
    
    function renderWarehousesPage() {
        const listContainer = document.getElementById('warehouse-list');
        listContainer.innerHTML = '';

        MOCK_DATA.warehouses.forEach(warehouse => {
            const stockInWarehouse = MOCK_DATA.stock_levels.filter(sl => sl.warehouse_id === warehouse.id);
            const totalUnits = stockInWarehouse.reduce((sum, sl) => sum + sl.quantity_on_hand, 0);
            const distinctVariants = new Set(stockInWarehouse.map(sl => sl.variant_id)).size;

            const card = document.createElement('div');
            card.className = 'bg-white p-6 rounded-lg shadow-sm';
            card.innerHTML = `
                <h3 class="text-lg font-semibold text-gray-900">${warehouse.name}</h3>
                <p class="text-sm text-gray-500 mb-4">${warehouse.address}</p>
                <div class="flex justify-between items-center text-sm">
                    <span class="text-gray-600">Total Unit:</span>
                    <span class="font-semibold text-gray-800">${totalUnits.toLocaleString('id-ID')}</span>
                </div>
                <div class="flex justify-between items-center text-sm mt-2">
                    <span class="text-gray-600">Jumlah Varian:</span>
                    <span class="font-semibold text-gray-800">${distinctVariants}</span>
                </div>
            `;
            listContainer.appendChild(card);
        });
    }

    function openProductModal(variantId) {
        const variant = MOCK_DATA.product_variants.find(v => v.id === variantId);
        if (!variant) return;
        const product = MOCK_DATA.products.find(p => p.id === variant.product_id);
        const category = MOCK_DATA.categories.find(c => c.id === product.category_id);
        const brand = MOCK_DATA.brands.find(b => b.id === product.brand_id);

        document.getElementById('modal-product-name').textContent = `${product.name} (${variant.variant_name})`;
        document.getElementById('modal-product-sku').textContent = `SKU: ${variant.sku}`;
        document.getElementById('modal-product-desc').textContent = product.description;
        document.getElementById('modal-product-category').textContent = category ? category.name : '-';
        document.getElementById('modal-product-brand').textContent = brand ? brand.name : '-';
        document.getElementById('modal-product-attributes').textContent = Object.entries(variant.attributes).map(([key, value]) => `${key}: ${value}`).join(', ');
        document.getElementById('modal-purchase-price').textContent = formatCurrency(variant.purchase_price);
        document.getElementById('modal-selling-price').textContent = formatCurrency(variant.selling_price);

        const stockLevelsBody = document.getElementById('modal-stock-levels-body');
        stockLevelsBody.innerHTML = '';
        const stockLevels = MOCK_DATA.stock_levels.filter(sl => sl.variant_id === variantId);
        stockLevels.forEach(sl => {
            const warehouse = MOCK_DATA.warehouses.find(w => w.id === sl.warehouse_id);
            const row = document.createElement('tr');
            row.className = 'border-b';
            row.innerHTML = `
                <td class="py-2 px-4">${warehouse.name}</td>
                <td class="py-2 px-4">${sl.quantity_on_hand}</td>
                <td class="py-2 px-4">${sl.quantity_committed}</td>
            `;
            stockLevelsBody.appendChild(row);
        });

        renderProductHistoryChart(variantId);
        document.getElementById('product-modal').classList.add('visible');
    }

    function renderProductHistoryChart(variantId) {
        const ctx = document.getElementById('productStockHistoryChart').getContext('2d');
        const movements = MOCK_DATA.stock_movements
            .filter(m => m.variant_id === variantId)
            .sort((a, b) => new Date(a.movement_date) - new Date(b.movement_date));

        let currentStock = 0;
        const historyData = movements.map(m => {
            currentStock += m.quantity_change;
            return {
                x: new Date(m.movement_date),
                y: currentStock
            };
        });

        if (productStockHistoryChart) {
            productStockHistoryChart.destroy();
        }

        productStockHistoryChart = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'Stok Fisik',
                    data: historyData,
                    borderColor: 'rgba(79, 70, 229, 1)',
                    backgroundColor: 'rgba(79, 70, 229, 0.1)',
                    fill: true,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: { 
                        type: 'time', 
                        time: { unit: 'day', tooltipFormat: 'DD MMM YYYY' },
                        grid: { display: false }
                    },
                    y: { 
                        beginAtZero: true,
                        grid: { color: '#e5e7eb' }
                    }
                },
                plugins: {
                    legend: { display: false }
                }
            }
        });
    }

    function setupEventListeners() {
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = e.target.getAttribute('href').substring(1);

                document.querySelectorAll('.nav-tab').forEach(t => {
                    t.classList.remove('nav-active');
                    t.classList.add('nav-inactive');
                });
                e.target.classList.add('nav-active');
                e.target.classList.remove('nav-inactive');

                document.querySelectorAll('.page').forEach(page => {
                    page.classList.add('hidden');
                });
                document.getElementById(`${targetId}-page`).classList.remove('hidden');
            });
        });

        document.getElementById('reset-filter-btn').addEventListener('click', () => {
            activeWarehouseFilter = null;
            renderDashboard();
        });

        document.getElementById('product-search').addEventListener('input', (e) => {
            renderProductsTable(e.target.value);
        });

        document.getElementById('products-table-body').addEventListener('click', (e) => {
            if (e.target.classList.contains('view-detail-btn')) {
                const variantId = parseInt(e.target.dataset.variantId, 10);
                openProductModal(variantId);
            }
        });
        
        document.getElementById('modal-close-btn').addEventListener('click', () => {
            document.getElementById('product-modal').classList.remove('visible');
        });
        
        document.getElementById('product-modal').addEventListener('click', (e) => {
            if (e.target.id === 'product-modal') {
                document.getElementById('product-modal').classList.remove('visible');
            }
        });
    }

    function init() {
        renderDashboard();
        renderProductsTable();
        renderWarehousesPage();
        setupEventListeners();
    }

    init();
});
</script>

</body>
</html>
